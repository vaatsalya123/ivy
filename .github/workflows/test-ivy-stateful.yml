name: test-stateful-ivy
on:
  push:
  pull_request:
    types: [labeled, opened, synchronize, reopened, review_requested]
permissions:
  actions: read
jobs:
   run-nightly-tests:
     if: ${{(github.event_name == 'push') || contains(github.event.pull_request.labels.*.name, 'Exhaustive CI') || contains(github.event.pull_request.labels.*.name, 'Exhaustive CI') }}
     strategy:
       matrix:
         backends :  [numpy, torch, jax, tensorflow]
         submodules: [activations, converters, layers, modules, norms, optimizers,
                      sequential]
     continue-on-error: true
     runs-on: ubuntu-latest
     steps:
       - name: Checkout üõéÔ∏èIvy
         uses: actions/checkout@v2
         with:
           path: ivy
           persist-credentials: false
           submodules: "recursive"
           fetch-depth: 2

       - name: Check Files Changed
         if: ${{ (github.event_name == 'push') || !contains(github.event.pull_request.labels.*.name, 'Exhaustive CI') }}
         shell: pwsh
         id: check_file_changed
         run: |
           cd ivy
           $diff = git diff --name-only HEAD^ HEAD
           $SourceDiff = $diff | Where-Object { `
             $_ -match 'ivy_tests/test_ivy/test_stateful/test_${{ matrix.submodules }}.py' `
             -or $_ -match 'ivy_tests/test_ivy/helpers.py' `
             -or $_ -match 'ivy/array/${{ matrix.submodules }}.py' `
             -or $_ -match 'ivy/container/${{ matrix.submodules }}.py' `
             -or $_ -match 'ivy/functional/backends/${{ matrix.backends }}/${{ matrix.submodules }}.py' `
             -or $_ -match 'ivy/functional/ivy/${{ matrix.submodules }}.py' `
             -or $_ -match 'ivy/stateful/${{ matrix.submodules }}.py' `
           }
           $HasDiff = $SourceDiff.Length -gt 0
           Write-Host "::set-output name=changed::$HasDiff"

       - name: Download artifact
         uses: dawidd6/action-download-artifact@v2
         if: steps.check_file_changed.outputs.changed == 'True' || steps.check_file_changed.conclusion == 'skipped'
         with:
           github_token: ${{secrets.GITHUB_TOKEN}}
           workflow: test-ivy-stateful.yml
           workflow_conclusion: ""
           search_artifacts: true
           name: hypothesis_${{ matrix.backends }}_test_${{ matrix.submodules }}_zip
           path: |
             ivy/.hypothesis/
         continue-on-error: true

       - name: Unzip Hypothesis Examples
         id: unzip
         if: steps.check_file_changed.outputs.changed == 'True' || steps.check_file_changed.conclusion == 'skipped'
         run: |
           cd ivy/.hypothesis
           unzip examples.zip
           rm examples.zip
         continue-on-error: true

       - name: Create Hypothesis Directory
         if: (steps.check_file_changed.outputs.changed == 'True' || steps.check_file_changed.conclusion == 'skipped') && steps.unzip.outcome != 'success'
         run: |
           cd ivy
           mkdir -p .hypothesis
           cd .hypothesis
           mkdir -p examples
         continue-on-error: true

       - name: Run Stateful Tests
         id: tests
         if: steps.check_file_changed.outputs.changed == 'True' || steps.check_file_changed.conclusion == 'skipped'
         run: |
           cd ivy
           ./run_tests_CLI/test_ivy_stateful.sh ${{ matrix.backends }} test_${{ matrix.submodules }}
         continue-on-error: true

       - name: Zip Hypothesis Examples
         if: steps.check_file_changed.outputs.changed == 'True' || steps.check_file_changed.conclusion == 'skipped'
         run: |
           cd ivy/.hypothesis
           zip -r examples.zip examples
         continue-on-error: true

       - name: Upload hypothesis
         uses: actions/upload-artifact@v3
         if: steps.check_file_changed.outputs.changed == 'True' || steps.check_file_changed.conclusion == 'skipped'
         with:
           name: hypothesis_${{ matrix.backends }}_test_${{ matrix.submodules }}_zip
           path: |
             ivy/.hypothesis/examples.zip
         continue-on-error: true

       - name: Install Python Clients
         if: (steps.check_file_changed.outputs.changed == 'True' && github.event_name == 'push')
         uses: BSFishy/pip-action@v1
         with:
             packages: |
               pymongo[srv]
               emoji

       - name: Update Database
         if: (steps.check_file_changed.outputs.changed == 'True' && github.event_name == 'push')
         env:
            MONGODB_PASSWORD: ${{ secrets.MONGODB_PASSWORD }}
         run: |
            cd ivy/automation_tools/dashboard_automation/
            python3 update_db.py "$MONGODB_PASSWORD" ${{ github.workflow }} ${{ matrix.backends }} ${{ matrix.submodules }} ${{ steps.tests.outcome }} ${{ github.run_id }}
         continue-on-error: true

       - name: Check on failures
         if: (steps.check_file_changed.outputs.changed == 'True' || steps.check_file_changed.conclusion == 'skipped') && steps.tests.outcome != 'success'
         run: exit 1

   update-tests-dashboard:
     needs: run-nightly-tests
     runs-on: ubuntu-latest
     env:
       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
       MONGODB_CREDENTIALS: ${{ secrets.MONGODB_PASSWORD }}
     steps:
       - name: Checkout üõéÔ∏èIvy
         uses: actions/checkout@v2
         with:
            path: ivy
            persist-credentials: false
            submodules: "recursive"
            fetch-depth: 2

       - name: Install Python Clients
         if: (steps.check_file_changed.outputs.changed == 'True' && github.event_name == 'push')
         uses: BSFishy/pip-action@v1
         with:
              packages: |
              PyGithub
              pymongo[srv]

       - name: "${{ github.workflow }} dashboard update"
         run: |
           cd ivy/automation_tools/dashboard_automation/
           python3 dashboard_script.py $MONGODB_CREDENTIALS $GITHUB_TOKEN ${{ github.workflow }}
